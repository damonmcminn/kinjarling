{"version":3,"sources":["../es6/index.js"],"names":[],"mappings":";;;;;;;;uBAAsB,oBAAoB;;wBAGrB,WAAW;;;;2BACL,cAAc;;uBACrB,SAAS;;;;oBACV,aAAa;;AALhC,SADQ,OAAO,EACN,CAAC;;AAOV,IAAM,GAAG,GAAG,sBAAS,CAAC;;AAEtB,IAAM,EAAE,GAAG,sBAAS,EAAC,IAAI,eANjB,IAAI,AAMa,EAAC,CAAC,CAAC;;qBAEb,EAAC,EAAE,EAAF,EAAE,EAAE,GAAG,EAAH,GAAG,EAAC;;AAExB,GAAG,CAAC,GAAG,CAAC,MARA,IAAI,EAQE,CAAC,CAAC;AAChB,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;MAE3B,KAAK,GAAI,GAAG,CAAC,MAAM,CAAnB,KAAK;;AACV,MAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;;MAEf,KAAK,GAAI,GAAG,CAAC,OAAO,CAApB,KAAK;;;;AAGV,MAAI,IAAI,GAAI,CAAC,KAAK,IAAI,aAnBV,MAAM,CAmBW,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,AAAC,CAAC;;AAEpD,MAAI,IAAI,EAAE,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;;AAErC,IAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACrC,KAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;CAErB,CAAC,CAAC;;AAEH,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,UAAA,MAAM,EAAI;gCACN,MAAM,CAAC,SAAS,CAAC,KAAK;MAAvC,MAAM,2BAAN,MAAM;MAAE,KAAK,2BAAL,KAAK;;AAElB,QAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;AAEnB,QAAM,CAAC,EAAE,CAAC,WAAW,EAAE,UAAA,IAAI,EAAI;AAC7B,MAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;GACtC,CAAC,CAAC;CAEJ,CAAC,CAAC;;AAGH,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE,UAAC,SAAS,EAAE,QAAQ,EAAK;MAE1C,KAAK,GAAI,SAAS,CAAC,MAAM,CAAzB,KAAK;;AAEV,MAAI,IAAI,GAAG,aA5CC,MAAM,CA4CA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;AAExC,MAAI,IAAI,EAAE;AACR,YAAQ,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;GAC7B,MAAM;AACL,YAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACtB;CAEF,CAAC,CAAC","file":"es6/index.js","sourcesContent":["import {install} from 'source-map-support';\ninstall();\n\nimport socketIO from 'socket.io';\nimport {path, groups} from 'parse-config';\nimport express from 'express';\nimport {json} from 'body-parser';\n\nconst api = express();\n\nconst io = socketIO({path});\n\nexport default {io, api}\n\napi.use(json());\napi.post('/:group', (req, res) => {\n\n  let {group} = req.params;\n  let data = req.body;\n\n  let {token} = req.headers;\n  // check token\n\n  let deny = (!token || groups.indexOf(group) === -1);\n\n  if (deny) return res.sendStatus(403);\n\n  io.to(group).emit('broadcast', data);\n  res.sendStatus(200);\n\n});\n\nio.on('connection', socket => {\n  let {client, group} = socket.handshake.query\n  \n  socket.join(group);\n\n  socket.on('broadcast', data => {\n    io.to(group).emit('broadcast', data);\n  });\n\n});\n\n\nio.set('authorization', (handshake, callback) => {\n\n  let {group} = handshake._query;\n\n  let deny = groups.indexOf(group) === -1;\n\n  if (deny) {\n    callback(new Error('DENY'));\n  } else {\n    callback(null, true);\n  }\n\n});\n"]}