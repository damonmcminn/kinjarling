{"version":3,"sources":["../../es6/client/rt.js"],"names":[],"mappings":";;;;AAAA,IAAI,EAAE,GAAI,YAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAK;;AAEhC,MAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;;mBAExB,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;;;;MAAvB,IAAI;;AAET,MAAI,MAAM,GAAG,EAAE,CAAC,IAAI,EAAE;AACpB,QAAI,OAAK,IAAI,AAAE;AACf,SAAK,aAAW,KAAK,AAAE;GACxB,CAAC,CAAC;;;AAGH,MAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,QAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACtB,YAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC;GACjC,CAAC,CAAC;;AAEH,QAAM,CAAC,EAAE,CAAC,WAAW,EAAE,UAAA,OAAO,EAAI;QAC3B,IAAI,GAAkB,OAAO,CAA7B,IAAI;QAAE,MAAM,GAAU,OAAO,CAAvB,MAAM;QAAE,IAAI,GAAI,OAAO,CAAf,IAAI;;;AAGvB,QAAI,MAAM,CAAC,EAAE,KAAK,MAAM,EAAE;;AAExB,cAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;KACtB;GACF,CAAC,CAAC;;AAEH,SAAO,UAAS,KAAK,EAAE;QAEhB,IAAI,GAAU,KAAK,CAAnB,IAAI;QAAE,IAAI,GAAI,KAAK,CAAb,IAAI;;AAEf,QAAI,CAAC,IAAI,EAAE;AACT,UAAI,GAAG,KAAK,CAAC;KACd;;QAEI,SAAS,GAAQ,MAAM,CAAvB,SAAS;QAAE,EAAE,GAAI,MAAM,CAAZ,EAAE;;AAElB,QAAI,OAAO,GAAG,EAAC,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAJ,IAAI,EAAE,MAAM,EAAE,EAAE,EAAC,CAAC;;AAEvC,QAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAEhC,QAAI,UAAU,IAAI,SAAS,EAAE;AAC3B,YAAM,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAClC,qCAA6B,IAAI,CAAG;KACrC,MAAM,IAAI,CAAC,UAAU,EAAE;AACtB,iCAAyB,IAAI,CAAG;KACjC,MAAM;AACL,4CAAmC,KAAK,iBAAa;KACtD;GACF,CAAA;CACF,AAAC,CAAC","file":"es6/client/rt.js","sourcesContent":["let rt = ((group, uri, events) => {\n\n  let path = /\\/\\w+$/i.exec(uri).pop();\n\n  let [host] = uri.split(path);\n\n  let socket = io(host, {\n    path: `${path}`,\n    query: `group=${group}`\n  });\n\n  // build hash map of events\n  let eventMap = {};\n  events.forEach(event => {\n    eventMap[event.name] = event.fn;\n  });\n\n  socket.on('broadcast', message => {\n    let {name, client, data} = message;\n\n    // find the event\n    if (socket.id !== client) {\n      // execute mapped function\n      eventMap[name](data);\n    }\n  });\n\n  return function(event) {\n\n    let {name, data} = event;\n\n    if (!name) {\n      name = event;\n    }\n    \n    let {connected, id} = socket;\n\n    let message = {name, data, client: id};\n\n    let validEvent = eventMap[name];\n\n    if (validEvent && connected) {\n      socket.emit('broadcast', message);\n      return `Broadcasted event: ${name}`;\n    } else if (!validEvent) {\n      return `Invalid event: ${name}`;\n    } else {\n      return `No connection. Is group '${group}' correct?`;\n    }\n  }\n});\n"]}